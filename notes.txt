#Tracking your files

--Each file in your  working directory can be in one of the two states: tracked and untracked

--Trcaked files are files that Git knows about.
--Any file in your working directory that was not in your last snapshot and is not in your staging area is untracked files.

#below are the commands how to add file or how to stage file.

--for specific file
git add <file-name>

--for all files and folder
git add . (here dot always refers to current directory)


#commit changes

--moving files from stage area to the git folder is called commit.
--making commits, creates version/snapshots of your projects.

--committing changes
git commit -m "your commit message"
  here -m is flag which stands for message.


#Lifecycle of the status of a file:

untracked --> unmodified  --> modified  --> stage

if you do commit to staged file,it becomes unmodified.

Note: once you have made some changes to the file, make sure to add that file again to stage area otherwise commit would not happen. Git 
      will not able to understand the changes you have made to that file.


#git logging

--viewing the commit history
   git log

 The most recent commit will at the top.

  git log -oneline

#Deleting a git project:
 rm -rf .git


#Additional git commands

--skipping the staging area
  git commit -a -m "commit message"

--git diff
 if you want to know exactly what you have changed, not just which files were changed - you can use the "git diff" command.

 Note: once you staged your file, you won't be able to see diffrence between previous commit and current change.

 if you want to see the changes that you have staged just right now and commits that was already there in the previous one, you can use 
 below command.
  git diff --staged

#.gitignore
---------------
often times, you donot want git to track of some specific autogenerated files like logs or build files etc.
To avoid them, you can list files or pattern for files in .gitignore file.

#moving and removing files
--------------------------
So when you delete or move a file using git as a tool, then it also stages the changes. So whatever the changes you do, it will automatically
get stages. So you don't have to stage the changes.means we don't have to explicitely add into staging area.
   
   -git rm <file-name>
   -git mv <location-of-source-filename> <destination-of-source-filename>

 Here are some points to note:
- if you run "rm <file-name>" command, file will get deleted but those changes yet to be identified by git so you have to explicitely 
  tell git in the stage. In simple words, those changes won't be available in staging area.

- if you run "git rm -rf <file-name>" command, those changes will automatically reflected in staging area. no need to run" git add ." 
  command.

#Untrack an already tracked file
 -git rm --cached <file-name>

Note: git doesn't keep track of empty folder.

#unstaging and unmodifying files:
--------------------------------
 -git restore --unstaged <file-name> 

 -git checkout --<filename>
  this command will takes your file to last version/commit.


 
